import pandas as pd
import os

# --- Configuration ---
ORIGINAL_CSV_PATH = 'crop_production.csv' # Path to the original input data
GEE_RESULTS_CSV_PATH = 'gee_seasonal_results.csv' # Path to the CSV generated by Script 1
FINAL_OUTPUT_CSV_PATH = 'final_crop_data_with_gee_seasonal.csv' # Name for the final merged file

print(f"--- Configuration ---")
print(f"Original Data CSV: {ORIGINAL_CSV_PATH}")
print(f"GEE Results CSV: {GEE_RESULTS_CSV_PATH}")
print(f"Final Output CSV: {FINAL_OUTPUT_CSV_PATH}")
print(f"---")

# --- Check if GEE results file exists ---
if not os.path.exists(GEE_RESULTS_CSV_PATH):
    print(f"ERROR: GEE results file not found at '{GEE_RESULTS_CSV_PATH}'.")
    print("Please run the Stage 1 script (calculate_gee_parameters_seasonal.py) first.")
    exit()

# --- Load DataFrames ---
print("\nLoading original data...")
try:
    df_original = pd.read_csv(ORIGINAL_CSV_PATH)
    # Basic cleaning - strip whitespace from season for matching
    df_original['Season'] = df_original['Season'].str.strip()
    # Drop rows with NA in key columns before merge
    df_original.dropna(subset=['State_Name', 'District_Name', 'Crop_Year', 'Season'], inplace=True)
    df_original['Crop_Year'] = df_original['Crop_Year'].astype(int)
    print(f"Loaded {len(df_original)} rows from {ORIGINAL_CSV_PATH}.")
except Exception as e:
    print(f"Error loading original CSV '{ORIGINAL_CSV_PATH}': {e}")
    exit()

print("\nLoading GEE results data...")
try:
    df_gee = pd.read_csv(GEE_RESULTS_CSV_PATH)
    # Ensure key types match original df if necessary (already done in script 1)
    df_gee['Crop_Year'] = df_gee['Crop_Year'].astype(int)
    df_gee['Season'] = df_gee['Season'].str.strip()
    print(f"Loaded {len(df_gee)} rows from {GEE_RESULTS_CSV_PATH}.")
except Exception as e:
    print(f"Error loading GEE results CSV '{GEE_RESULTS_CSV_PATH}': {e}")
    exit()

# --- Perform Merge ---
print("\nPerforming merge...")
try:
    # Define the keys to merge on (using original column names)
    merge_keys = ['State_Name', 'District_Name', 'Crop_Year', 'Season']

    # Perform a left merge to keep all rows from the original data
    # and add GEE columns where keys match
    df_merged = pd.merge(
        df_original,
        df_gee,
        on=merge_keys,
        how='left' # Keep all rows from df_original
    )
    print(f"Merge complete. Resulting DataFrame has {len(df_merged)} rows.")

    # Check merge quality (optional)
    missing_gee_data = df_merged['Mean_LST_C_Season'].isnull().sum()
    if missing_gee_data > 0:
         print(f"Note: {missing_gee_data} rows in the merged data do not have corresponding GEE results (check keys or geometry_found=False in GEE results).")

except Exception as e:
    print(f"Error during merging: {e}")
    exit()

# --- Save Final Output ---
print(f"\nSaving final merged data to {FINAL_OUTPUT_CSV_PATH}...")
try:
    df_merged.to_csv(FINAL_OUTPUT_CSV_PATH, index=False)
    print("Final merged CSV saved successfully.")
except Exception as e:
    print(f"Error saving final output CSV: {e}")

print("\nStage 2 Script finished.")
